<?xml version="1.0" encoding="utf-8" ?>
<rss version="1.0">
    <channel>
        <title>Revolution blahg</title>
        <link>http://mapleoin.eu/</link>
        <description>mapleoin's rambling blahg</description>
        <language>en</language>
        <pubDate>Tue, 27 Sep 2011 12:19:21 +0300</pubDate>
        <generator>pyBlee!</generator>
        <item>
            <title>SQL and Relation Theory Master Class</title>
            <link>http://mapleoin.eu/perma/sql-and-relational-theory-master</link>
            <author>mapleoin@lavabit.ro (mapleoin)</author>
            <description>  &lt;p&gt;This video course is perhaps the best way to meet the famous C. J. Date and his astonishingly comprehensive style. The lectures are a great introduction to database theory while at the same time they lay a very solid foundation for any database practitioners or theorists. The author introduces some very useful theoretical notions that are essential to grasping the more subtle concepts of database design and he does so in a high-class fashion.&lt;/p&gt;
&lt;p&gt;C. J. Date&amp;#8217;s style of explaining and teaching, which can also be seen in his books, is didactic and very thorough while at the same time astonishingly clear. Many times while reading the book that these videos are based on and even afterward while watching the videos, I had to stop in order to reflect at the great volume of information that I had absorbed in a surprisingly simple manner. These videos are full of very deep notions about databases and can really benefit from reviewing at a later time, just to cement the knowledge or reflect on certain topics which come up during everyday practice.&lt;/p&gt;
&lt;p&gt;C. J. Date sets out to demolish &lt;span class="caps"&gt;SQL&lt;/span&gt; as a language fit for relational theory and databases in general. While going through all the database theory concepts he presents the ideal case and an ideal query language (actually not ideal, but as he demonstrates, the correct ones) contrasting them to generic &lt;span class="caps"&gt;SQL&lt;/span&gt;. He also posits and sets out to prove, in a very interesting argument, that relational databases are the only way to store data and all other data models &lt;strong&gt;will not endure&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;These are the days of &lt;span class="caps"&gt;NOSQL&lt;/span&gt; databases, but I think that the information contained in these lectures will be useful for a lot more time and in a lot more settings than just conventional &lt;span class="caps"&gt;SQL&lt;/span&gt; databases that are used in the majority of current systems. I oftentimes find myself thinking in relational terms even while designing the redis data model that I&amp;#8217;m currently working on.&lt;/p&gt;
&lt;p&gt;Rating these videos 4 stars is just nit-picking, but I did feel sometimes that the lectures were a bit dull. It is also possible that I got this impression because I was watching too many without interruption :). While the content of the lectures is excellent, the presentation could be improved. Often times I felt that the audience present in the classroom could have done more to improve the dynamism of the lectures. It seemed that the only reason why they were there was so that the presenter wouldn&amp;#8217;t feel alone. I would have enjoyed more challenging questions and especially some skeptical comments from industry veterans perhaps. I&amp;#8217;m sure those would have led to very interesting debates considering the high class of the lecturer and presumably, the attendants.&lt;/p&gt; </description>
            <pubDate>Fri, 11 Sep 2026 00:00 GMT</pubDate>
        </item>
        <item>
            <title>Copr final report</title>
            <link>http://mapleoin.eu/perma/copr-final-report</link>
            <author>mapleoin@lavabit.ro (mapleoin)</author>
            <description>  &lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Summer_Coding_2010"&gt;Fedora Summer Coding&lt;/a&gt; is now over for me and I&amp;#8217;m really glad of what I learned and coded this summer.&lt;/p&gt;
&lt;p&gt;Our initial goal was to develop a TurboGears2 Web app and &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; for &lt;a href="https://fedoraproject.org/wiki/Category:Copr"&gt;Fedora Copr&lt;/a&gt;. When finished, Copr should provide everyone with a place to build Fedora packages and host custom repositories for everyone to enjoy. This is a project that should prove quite popular in the Fedora Community when it gets released and I&amp;#8217;m glad to have played a role in its development.&lt;/p&gt;
&lt;p&gt;At first I worked on the web app, modeling the database and the relationship between coprs and repos and packages and then developing the &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. When the midterm came, my mentor and I decided that I should also contribute to the other parts of Copr. The original schedule had a simple command-line client planned, but we went further than that. In the end all of the functionality of the &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; also got implemented in a client library (based on and very similar to &lt;a href="https://fedorahosted.org/python-fedora/"&gt;python-fedora&lt;/a&gt;) and in a command-line client. I also got to dive into python-fedora&amp;#8217;s and repoze.who&amp;#8217;s internals in order to get basic &lt;span class="caps"&gt;HTTP&lt;/span&gt; authentication working for TurboGears2.&lt;/p&gt;
&lt;p&gt;My latest work has been on the &lt;a href="https://fedorahosted.org/func/"&gt;func&lt;/a&gt; module. This is the buildsystem part of Copr. Func minions running this module will be commanded by &lt;a href="https://fedorahosted.org/headhunter"&gt;headhunter&lt;/a&gt; (Copr&amp;#8217;s scheduler) to build packages in mock and then move them into repositories. The module also creates, updates and deletes package repositories and will check the built packages for Fedora conformance (e.g. licensing) &amp;#8211; this last part is not yet implemented. I got to play with virtual machines and func and &lt;a href="https://fedoraproject.org/wiki/Projects/Mock"&gt;mock&lt;/a&gt; and &lt;a href="http://createrepo.baseurl.org/"&gt;createrepo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is a more synthethic overview of all the different things that got implemented &lt;a href="https://fedoraproject.org/wiki/User:Mapleoin/FSC-Copr-status"&gt;on the wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overall, I&amp;#8217;m really glad of what I learned this summer. This project really got me involved in a lot of different levels of the architecture of a web service and a lot of different technologies. Some of the things I worked on looked really scary at first, but as I went nearer and read more code the mist slowly vanished.&lt;/p&gt;
&lt;p&gt;My mentor, &lt;a href="http://anonbadger.wordpress.com/"&gt;Toshio Kuratomi&lt;/a&gt; was great as always. This isn&amp;#8217;t the first project I&amp;#8217;ve had him as my mentor. He was always there to talk to and always had great answers to all of my questions. He had great patience in answering and explaining anything I asked about. Our discussions were mostly about the architecture of the app we were building, but he also gave me great tips on the inner workings of python-fedora or on deploying the web app. I felt I had a lot of liberty to decide the way things will get implemented. Regardless of whether we will ever work together again, Toshio will always be a great inspiration for me as a programmer and as a person.&lt;/p&gt; </description>
            <pubDate>Tue, 28 Sep 2010 15:33 GMT</pubDate>
        </item>
        <item>
            <title>FSC: moving to the buildsystem</title>
            <link>http://mapleoin.eu/perma/moving-on-to-the-buildsystem</link>
            <author>mapleoin@lavabit.ro (mapleoin)</author>
            <description>  &lt;p&gt;I started working on the buildsystem part of copr this week. Right now, I&amp;#8217;m still getting familiar with &lt;a href="http://fedorahosted.org/func"&gt;func&lt;/a&gt;. That&amp;#8217;s what we&amp;#8217;ll be using to communicate with the builder machines: get them running errands and get back status reports at any time. I spent a lot of time getting a virtual machine setup with libvirt; networking especially was a pain (mostly because of my pppoe connection I think).&lt;/p&gt;
&lt;p&gt;One nice feature of func that I think we&amp;#8217;ll be using a lot is the &lt;a href="https://fedorahosted.org/func/wiki/AsyncUsage"&gt;async mode&lt;/a&gt;. A mock build takes a lot of time, what with all the yumming and compiling. So starting a task via one of the user interfaces and then choosing whether or not to keep watching it and what to watch for will probably be an essential part of the buildsystem&amp;#8217;s functionality.&lt;/p&gt;
&lt;p&gt;In the meantime, we&amp;#8217;re slowly &lt;a href="https://fedorahosted.org/fedora-infrastructure/ticket/2339"&gt;getting resources&lt;/a&gt; for the deployment of Copr. Toshio got a running instance of the current state of the TG app on &lt;a href="http://publictest1.fedoraproject.org/copr/"&gt;publictest1&lt;/a&gt;. It looks just like a quickstarted TG app, because it doesn&amp;#8217;t have any WebUI. But it can &lt;span class="caps"&gt;CRUD&lt;/span&gt; coprs, handle dependencies between them, handle permissions and &lt;span class="caps"&gt;CRD&lt;/span&gt; packages. Most of the functions require a &lt;a href="http://admin.fedoraproject.org/accounts"&gt;FAS&lt;/a&gt; account, but you don&amp;#8217;t need one to see a &lt;a href="http://publictest1.fedoraproject.org/copr/coprs.json"&gt;list of all the coprs&lt;/a&gt;, or a &lt;a href="http://publictest1.fedoraproject.org/copr/firstcopr/packages.json"&gt;list of packages in a copr&lt;/a&gt;.&lt;/p&gt; </description>
            <pubDate>Mon, 06 Sep 2010 19:53 GMT</pubDate>
        </item>
        <item>
            <title>the Copr client part II</title>
            <link>http://mapleoin.eu/perma/copr-client-part-2</link>
            <author>mapleoin@lavabit.ro (mapleoin)</author>
            <description>  &lt;p&gt;I spent this week finishing up the copr client. It now supports all the functionality that the Copr TG &lt;span class="caps"&gt;API&lt;/span&gt; supports. It&amp;#8217;s not much, but it&amp;#8217;s a starting point.&lt;/p&gt;
&lt;p&gt;I spent a lot of time trying to understand the way repoze.who works and the authentication plugins that we&amp;#8217;re using for the &lt;a href="https://fedorahosted.org/python-fedora/"&gt;python-fedora&lt;/a&gt; &lt;a href="https://admin.fedoraproject.org/accounts"&gt;FAS&lt;/a&gt; authentication plugin. I finally understood it, I think&amp;#8230; The Fedora client library didn&amp;#8217;t support basic &lt;span class="caps"&gt;HTTP&lt;/span&gt; Authentication for TG2 apps so I had to figure out how to integrate that into our authentication plugin. It was quite fun all in all, repoze.who has a very interesting way of doing authentication and writing wsgi middleware is always exciting ;). This patch will hopefully go upstream to python-fedora now.&lt;/p&gt;
&lt;p&gt;This next week I&amp;#8217;ll probably start working on the buildsystem part of Copr. There are a lot of new things to learn there.&lt;/p&gt; </description>
            <pubDate>Mon, 30 Aug 2010 10:42 GMT</pubDate>
        </item>
        <item>
            <title>the Copr client</title>
            <link>http://mapleoin.eu/perma/copr-client</link>
            <author>mapleoin@lavabit.ro (mapleoin)</author>
            <description>  &lt;p&gt;This last week I started working on the command line client to &lt;a href="https://fedoraproject.org/wiki/Category:Copr"&gt;Copr&lt;/a&gt;. Luckily, the &lt;a href="https://fedorahosted.org/python-fedora"&gt;python-fedora&lt;/a&gt; already has a lot of code in place to make the task of writing clients for TurboGears apps a lot easier. Some of &lt;a href="http://admin.fedoraproject.org/pkgdb"&gt;the&lt;/a&gt; &lt;a href="http://admin.fedoraproject.org/updates"&gt;apps&lt;/a&gt; &lt;a href="http://admin.fedoraproject.org/accounts"&gt;in&lt;/a&gt; infrastructure are already using this library, which make for some good examples.&lt;/p&gt;
&lt;p&gt;So I&amp;#8217;m building a client library and a client um&amp;#8230; command line client. The command line client is basically one big &lt;a href="http://docs.python.org/library/argparse.html"&gt;argparse&lt;/a&gt; application that calls the functions in the client library and sometimes does a bit of formatting on the output. The client library implements a fedora.client.BaseClient that mostly just calls json methods on the Copr server.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s all pretty simple. The hard part is deciding what the command line client&amp;#8217;s interface will look like. In argparse parlance, which ones should be the positional arguments and which should be the optional arguments. So far I&amp;#8217;ve been inclined to use something that looks like a VCS&amp;#8217;s interface. Here&amp;#8217;s what it looks like so far:&lt;/p&gt;
&lt;pre&gt;
$ python client/bin.py -h
usage: bin.py [-h] [-v] [-u USERNAME] [-p PASSWORD] [--url URL]
              {info,edit,create,list,delete}
Command line tool for interacting with Fedora Copr
positional arguments:
  {info,edit,create,list,delete}
    list                list all the available Coprs
    info                get information about a specific Copr
    create              create a new Copr
    edit                edit an existing copr
    delete              delete an existing copr
optional arguments:
  -h, --help            show this help message and exit
  -v, --version
  --url URL             provide an alternate url for the Copr service
authentication:
  -u USERNAME, --username USERNAME
  -p PASSWORD, --password PASSWORD
&lt;/pre&gt;
&lt;p&gt;Right now, all the copr functions are top-level. I wonder if I&amp;#8217;ll have to create a deeper level of nesting when I start implementing package-related functions.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m also having a few problems with the BaseClient that I&amp;#8217;ll probably have to solve this week. All of the other client libraries were written for TurboGears 1.x and it seems that authentication has changed in TurboGears 2. There&amp;#8217;s also no support for &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;PUT&lt;/span&gt; and &lt;span class="caps"&gt;DELETE&lt;/span&gt; which I would like to use since I used RestControllers in the &lt;span class="caps"&gt;API&lt;/span&gt;. I also had to write a patch for file upload support; that seems to work well so far.&lt;/p&gt; </description>
            <pubDate>Mon, 23 Aug 2010 10:07 GMT</pubDate>
        </item>
        <item>
            <title>Ruby koans</title>
            <link>http://mapleoin.eu/perma/ruby-koans</link>
            <author>mapleoin@lavabit.ro (mapleoin)</author>
            <description>  &lt;p&gt;I had a great time today with &lt;a href="http://www.rubykoans.com/"&gt;Ruby Koans&lt;/a&gt;. It took me about 5 hours in all. A good way to spend a Sunday afternoon I suppose.&lt;/p&gt;
&lt;p&gt;These Ruby Koans are a great way to go on a quick journey through a lot of Ruby&amp;#8217;s common features. You basically have to edit tests in order to get them working. It&amp;#8217;s mostly reading tests actually, but the fact that you have to fill in some blanks keeps the mind from wandering. There are also a couple of exercises which imply a bit more coding.&lt;/p&gt;
&lt;p&gt;I have a good knowledge of Python and have worked with Ruby in the past on a little Rails project. I had forgotten anything I knew about Ruby though. Yesterday, I don&amp;#8217;t think I would&amp;#8217;ve been able to write a foobaz in Ruby without looking for help online. This proved to be a welcome refresher. Solving these koans gives a great tour of Ruby. As I went through them I kept thinking of how I would do those things with Python. I really like Python&amp;#8217;s philosophy and maybe solving all these ruby koans has made me appreciate Python&amp;#8217;s simplicity and predictability a bit more. Ruby allows for a lot more flexibility however and the koans left me to wonder at what amazing feats this language could accomplish.&lt;/p&gt;
&lt;p&gt;I wouldn&amp;#8217;t recommend this to a beginner however. While I think I now have a pretty good idea of what the language can do, there were no whys or recommendations about all these features. Maybe it would be a good starting point (or a &lt;em&gt;dive&lt;/em&gt;) for someone coming from a similar language (like Python), before moving on to a good Ruby book. The website claims that they teach culture in addition to Ruby. I would&amp;#8217;ve liked more of that. Maybe it was too subtle for me, but I didn&amp;#8217;t notice anything other than some references to oriental philosophy: &lt;code&gt;test_assert_truth has damaged your karma. You have not yet reached enlightenment ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of ports of the Ruby Koans. There&amp;#8217;s one for &lt;a href="http://wiki.github.com/gregmalcolm/python_koans/"&gt;python&lt;/a&gt; and there are also a bunch for &lt;a href="http://github.com/relevance/functional-koans"&gt;functional languages&lt;/a&gt;: Clojure, F#, Haskell and Scala. These look like a lot of fun, maybe I&amp;#8217;ll try them next week.&lt;/p&gt; </description>
            <pubDate>Sun, 22 Aug 2010 22:22 GMT</pubDate>
        </item>
        <item>
            <title>Fedora Summer Coding midterm</title>
            <link>http://mapleoin.eu/perma/midterm-report</link>
            <author>mapleoin@lavabit.ro (mapleoin)</author>
            <description>  &lt;p&gt;This midterm scared me when I found out about it on Friday when I looked at the schedule I had set myself. However, I have done the work that I should have done by this point in the project. When I wrote the proposal I had assumed that the buildsystem would already be built before me starting coding on the TG app, but that is not the case. Therefore I could only code the user-facing &lt;span class="caps"&gt;JSON&lt;/span&gt; interface that interacts with the DB as it would if the buildsystem would provide it with packages and repos. Except that there are no packages and repos at this stage.&lt;/p&gt;
&lt;p&gt;So for this midterm, we&amp;#8217;ve got working Copr &lt;span class="caps"&gt;CRUD&lt;/span&gt;, dependency handling and release/repo editing on a Copr. I also coded the Package &lt;span class="caps"&gt;CRUD&lt;/span&gt;, which basically allows for uploads of SRPMs, stores the info in the db and also allows for information retrieval and deleting packages. Actually building packages and retrieving packagebuilds will have to wait for the buildsystem to be built.&lt;/p&gt;
&lt;p&gt;After I finish polishing things a bit, I will probably start working on a basic client and then maybe move on to working on the buildsystem part of Copr. That should be loads of fun especially since I haven&amp;#8217;t done anything quite like this before. So it will be hard, but fun :).&lt;/p&gt;
&lt;p&gt;If anyone wants to check out what Copr looks like so far, you&amp;#8217;ll just have to install TurboGears 2.0.x and then:&lt;/p&gt;
&lt;div class="Bash"&gt;&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;bzr branch bzr://bzr.fedorahosted.org/bzr/copr/devel
 &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;devel
 &lt;span class="nv"&gt;$ &lt;/span&gt;python setup.py develop
 &lt;span class="nv"&gt;$ &lt;/span&gt;paster setup-app development.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And you should have a working Copr. You can run the unit tests with the &lt;code&gt;nosetests&lt;/code&gt; command and all 52 of them should run fine. Yay!&lt;/p&gt;
&lt;p&gt;Congratulations to everyone who is finishing their &lt;span class="caps"&gt;FSC&lt;/span&gt; adventure today! I&amp;#8217;ll still be coding for another month or so.&lt;/p&gt; </description>
            <pubDate>Mon, 16 Aug 2010 12:17 GMT</pubDate>
        </item>
    </channel>
</rss>
